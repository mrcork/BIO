def River(river):
    '''expects an integer
    generates all rivers with values less than 25000 starting from river
    '''
    yield river
    while river <= 25000:
        river += sum(int(digit) for digit in str(river))
        yield river


def findRiver(n):
    ''' expects an integer n
    looks through the sequence generated by River n 
    Checks through the sets of rivers 1,3 and 9
    prints the river 1, 3 or 9 that is met and when it is met. 
    '''
    endrivers = {1: set(River(1)), 3: set(River(3)), 9: set(River(9))}
    for river in River(n):
        for i in endrivers:
            if river in endrivers[i]:
                print(i,river)
                return


def findEfficientRiver(n):
    ''' expects an integer n
    looks through the sequence generated by River n 
    Starts the generators for endrivers 1,3 and 9
    Updates current river from endrivers until we have a number larger than or equal to our value from River n 
    prints the river 1, 3 or 9 that is met and when it is met. 
    
    Differs from findRiver as it does not generate the entire set of endrivers
    '''
    endrivers = {1: River(1), 3: River(3), 9: River(9)}
    current = {i: next(endrivers[i]) for i in endrivers}
    for river in River(n):
        for i in endrivers:
            while river > current[i]:
                current[i] = next(endrivers[i])
            if river == current[i]:
                    print(i,river)
                    return


findRiver(int(input()))